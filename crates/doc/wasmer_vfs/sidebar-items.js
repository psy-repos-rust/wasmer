window.SIDEBAR_ITEMS = {"enum":[["FsError","Error type for external users"],["StdioMode","Determines the mode that stdio handlers will operate in"]],"mod":[["arc_box_file","Used for sharing references to the same file across multiple file systems, effectively this is a symbolic link without all the complex path redirection"],["arc_file","Used for sharing references to the same file across multiple file systems, effectively this is a symbolic link without all the complex path redirection"],["arc_fs","Wraps a clonable Arc of a file system - in practice this is useful so you can pass clonable file systems with a Box to other interfaces"],["builder",""],["combine_file",""],["dual_write_file",""],["empty_fs","When no file system is used by a WebC then this is used as a placeholder - as the name suggests it always returns file not found."],["host_fs",""],["mem_fs",""],["null_file","NullFile is a special file for `/dev/null`, which returns 0 for all operations except writing."],["passthru_fs","Wraps a boxed file system with an implemented trait VirtualSystem - this is needed so that a Box can be wrapped in an Arc and shared - some of the interfaces pass around a Box"],["pipe",""],["special_file","Used for /dev/stdin, /dev/stdout, dev/stderr - returns a static file descriptor (0, 1, 2)"],["static_fs",""],["tmp_fs","Wraps the memory file system implementation - this has been enhanced to support mounting file systems, shared static files, readonly files, etcâ€¦"],["union_fs","Another implementation of the union that uses paths, its not as simple as TmpFs. not currently used but was used by the previoulsy implementation of Deploy - now using TmpFs"],["webc_fs",""],["zero_file","Used for /dev/zero - infinitely returns zero which is useful for commands like `dd if=/dev/zero of=bigfile.img size=1G`"]],"struct":[["DirEntry",""],["FileType",""],["Metadata",""],["OpenOptions",""],["OpenOptionsConfig",""],["ReadBuf","A wrapper around a byte buffer that is incrementally filled and initialized."],["ReadDir",""]],"trait":[["AsyncRead","Reads bytes from a source."],["AsyncReadExt","Reads bytes from a source."],["AsyncSeek","Seek bytes asynchronously."],["AsyncSeekExt","An extension trait that adds utility methods to `AsyncSeek` types."],["AsyncWrite","Writes bytes asynchronously."],["AsyncWriteExt","Writes bytes to a sink."],["ClonableVirtualFile",""],["FileOpener",""],["FileSystem",""],["Upcastable","Trait needed to get downcasting from `VirtualFile` to work."],["VirtualFile","This trait relies on your file closing when it goes out of scope via `Drop`"]],"type":[["Result",""]]};